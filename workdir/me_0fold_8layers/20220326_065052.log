2022-03-26 06:50:52,563 - drp - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
CUDA available: True
GPU 0: GeForce RTX 3090
CUDA_HOME: /usr/local/cuda
NVCC: Build cuda_11.0_bu.TC445_37.28540450_0
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~18.04) 9.4.0
PyTorch: 1.11.0+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.12.0+cu113
OpenCV: 4.5.5
MMCV: 1.3.10
MMCV Compiler: n/a
MMCV CUDA Compiler: n/a
------------------------------------------------------------

2022-03-26 06:50:52,564 - drp - INFO - Distributed training: False
2022-03-26 06:50:52,605 - drp - INFO - Config:
/data2/xieyufeng/AGMI/configs/_base_/models/AGMI/agmi_8layers.py
model = dict(
    type='AGMIDRPNet',
    drper=dict(
        type='AGMIDRPer',
        in_channel = 3,
        gather_width=6,
        drug_encoder=dict(
            type='DrugGATEncoder',
            num_features_xd=78, 
            heads=10, 
            output_dim=128, 
            gat_dropout=0.2
        ),
        genes_encoder=dict(
            type='MultiEdgeGatedGraphConv',
            out_channels=3, 
            num_layers=6, 
            num_edges=3,
            aggr='add',
            bias=True,
        ),
        head=dict(
            type='AGMIFusionHead',
            out_channels=128,
        ),
        neck=dict(
            type='AGMICellNeck',
            in_channels=[6,8,16], 
            out_channels=[8,16,32], 
            kernel_size=[16,16,16], 
            drop_rate=0.2, 
            max_pool_size=[3,6,6], 
            feat_dim=128
        ),
    ),
    loss=dict(type='MSELoss', loss_weight=1.0, reduction='mean'),
)

train_cfg = None
test_cfg = dict(metrics=['MAE', 'MSE', 'RMSE',
                         'R2', 'PEARSON', 'SPEARMAN'])

/data2/xieyufeng/AGMI/configs/_base_/drp_dataset/drugs_genes_dataset.py
data = dict(
    workers_per_gpu=1,
    train_dataloader=dict(samples_per_gpu=32, drop_last=True, pin_memory=False, exclude_keys=[], follow_batch=['x_cell']),
    val_dataloader=dict(samples_per_gpu=32, drop_last=True, pin_memory=False, exclude_keys=[], follow_batch=['x_cell']),
    test_dataloader=dict(samples_per_gpu=32, drop_last=True, pin_memory=False, exclude_keys=[], follow_batch=['x_cell']),
    train=dict(
        type='InMemoryMultiEdgeGraphGenesDataset',
        data_items='data/split/0_fold_tr_items.npy',
        celllines_data='data/processed_raw_data/564_cellGraphs_exp_mu_cn.npy',
        num_genes_nodes=18498,
        metrics=['RMSE', 'MSE', 'R2', 'PEARSON', 'MAE', 'SPEARMAN'],
        drug_graphs='data/processed_raw_data/drugId_drugGraph.npy',
        root='data',
        name='MultiEdgeGraphGenes_0_fold_tr',
        transform=None,
        pre_transform=None),
    val=dict(
        type='InMemoryMultiEdgeGraphGenesDataset',
        data_items='data/split/0_fold_val_items.npy',
        celllines_data='data/processed_raw_data/564_cellGraphs_exp_mu_cn.npy',
        num_genes_nodes=18498,
        metrics=['RMSE', 'MSE', 'R2', 'PEARSON', 'MAE', 'SPEARMAN'],
        drug_graphs='data/processed_raw_data/drugId_drugGraph.npy',
        root='./data',
        name='MultiEdgeGraphGenes_0_fold_val',
        transform=None,
        pre_transform=None),
    test=dict(
        type='InMemoryMultiEdgeGraphGenesDataset',
        data_items='data/split/test_items.npy',
        celllines_data='data/processed_raw_data/564_cellGraphs_exp_mu_cn.npy',
        num_genes_nodes=18498,
        metrics=['RMSE', 'MSE', 'R2', 'PEARSON', 'MAE', 'SPEARMAN'],
        drug_graphs='data/processed_raw_data/drugId_drugGraph.npy',
        root='./data',
        name='MultiEdgeGraphGenes_test',
        transform=None,
        pre_transform=None),
)

/data2/xieyufeng/AGMI/configs/_base_/exp_setting/base_setting.py
# optimizer
optimizers = dict(drper=dict(type='Adam', lr=1e-4))

# learning policy
total_iters = 1000000
lr_config = dict(policy='Step', by_epoch=False, step=[200000, 400000, 800000, 1000000], gamma=0.5)

checkpoint_config = dict(interval=10000, save_optimizer=True, by_epoch=False, max_keep_ckpts=10)
evaluation = dict(interval=10000)
visual_config = None

# runtime settings

/data2/xieyufeng/AGMI/configs/_base_/default_runtime.py
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
log_config = dict(
    interval=2500,
    hooks=[
        dict(type='TextLoggerHook', by_epoch=False),
    ])
/data2/xieyufeng/AGMI/configs/agmi/agmi_8layers.py
exp_name = 'me_0fold_8layers'

_base_ = [
    '../_base_/models/AGMI/agmi_8layers.py',
    '../_base_/drp_dataset/drugs_genes_dataset.py',
    '../_base_/exp_setting/base_setting.py',
    '../_base_/default_runtime.py'
]

edges = ['data/edges/processed/GSEA_edge_indexes_all_pairs_676_weighted.npy', 
         'data/edges/processed/STRING_edge_index_all_10463182_pairs_weighted.npy' ,
         'data/edges/processed/edge_index_pearson_0.6.npy']

model = dict(
    drper=dict(
        genes_encoder=dict(
            num_layers=6,
        ),
    ),
)

test_batch_size = 8

data = dict(
    test_dataloader=dict(samples_per_gpu=test_batch_size, drop_last=True, pin_memory=False, exclude_keys=[], follow_batch=['x_cell']),
)

custom_hooks = [
    dict(type='TensorboardXHook',
         priority=85,
         log_dir='/data2/xieyufeng/drp_results/tb_data/',
         interval=2500,
         exp_name=exp_name,
         ignore_last=True,
         reset_flag=False,
         by_epoch=False
         ),
    dict(type='MEHook',
         priority='VERY_LOW',
         gsea_path=edges[0],
         ppi_path=edges[1],
         pearson_path=edges[2],
         num_nodes=18498
         )
]

work_dir = f'workdir/{exp_name}'

